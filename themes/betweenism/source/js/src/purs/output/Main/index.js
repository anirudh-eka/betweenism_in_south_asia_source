// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Data_Array = require("Data.Array");
var Data_Maybe = require("Data.Maybe");
var $$Math = require("Math");
var Point = (function () {
    function Point(value0) {
        this.value0 = value0;
    };
    Point.create = function (value0) {
        return new Point(value0);
    };
    return Point;
})();
var NoPoint = (function () {
    function NoPoint() {

    };
    NoPoint.value = new NoPoint();
    return NoPoint;
})();
var toPoint = function (obj) {
    return new Point(obj);
};
var showPoint = new Prelude.Show(function (v) {
    if (v instanceof Point) {
        return "(" + (Prelude.show(Prelude.showNumber)(v.value0.x) + (", " + (Prelude.show(Prelude.showNumber)(v.value0.y) + ")")));
    };
    if (v instanceof NoPoint) {
        return "No point!";
    };
    throw new Error("Failed pattern match at Main line 13, column 1 - line 17, column 1: " + [ v.constructor.name ]);
});
var pointDiff = function (v) {
    return function (v1) {
        if (v1 instanceof NoPoint) {
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof NoPoint) {
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Point && v1 instanceof Point) {
            return new Data_Maybe.Just($$Math.sqrt((v.value0.x - v1.value0.x) * (v.value0.x - v1.value0.x) + (v.value0.y - v1.value0.y) * (v.value0.y - v1.value0.y)));
        };
        throw new Error("Failed pattern match at Main line 33, column 1 - line 34, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var main = Control_Monad_Eff_Console.log("Purescript Loaded.");
var lessThan = function (p1) {
    return function (p2) {
        return function (given) {
            return Data_Maybe.maybe(true)(Data_Maybe.maybe(function (diff2) {
                return false;
            })(function (diff1) {
                return function (diff2) {
                    return diff1 < diff2;
                };
            })(pointDiff(given)(p1)))(pointDiff(given)(p2));
        };
    };
};
var findNearestPoint = function (given) {
    return function (pts) {
        var findNearestPoint$primeʹ = function (p1) {
            return function (p2) {
                return function (given1) {
                    if (lessThan(p1)(p2)(given1)) {
                        return p1;
                    };
                    if (Prelude.otherwise) {
                        return p2;
                    };
                    throw new Error("Failed pattern match at Main line 26, column 3 - line 27, column 3: " + [ p1.constructor.name, p2.constructor.name, given1.constructor.name ]);
                };
            };
        };
        var findNearestPointʹ = function (given1) {
            return function (nearest) {
                return function (v) {
                    if (v.length === 0) {
                        return nearest;
                    };
                    return Data_Maybe.maybe(nearest)(function (v1) {
                        return findNearestPointʹ(given1)(findNearestPoint$primeʹ(toPoint(v1.head))(nearest)(given1))(v1.tail);
                    })(Data_Array.uncons(v));
                };
            };
        };
        return findNearestPointʹ(toPoint(given))(NoPoint.value)(pts);
    };
};
module.exports = {
    Point: Point, 
    NoPoint: NoPoint, 
    main: main, 
    pointDiff: pointDiff, 
    lessThan: lessThan, 
    findNearestPoint: findNearestPoint, 
    toPoint: toPoint, 
    showPoint: showPoint
};
